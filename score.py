import csv
import requests
import requests_oauthlib
import json
import time
import matplotlib.pyplot as plt


def comparedate(date1, date2):
	if date1[6:10] > date2[6:10]:
		return True
	elif date1[6:10] == date2[6:10]:
		if date1[:2] > date2[:2]:
			return True
		elif date1[:2] == date2[:2]:
			if date1[3:5] > date2[3:5]:
				return True
			else:
				return False
		else:
			return False
	else: 
		return False
def mean(l):
	return sum(l)/float(len(l))

score_data = []
with open('restaurant_scores.csv','rb') as f:
	reader = csv.DictReader(f)
	for row in reader:
		score_data.append(row)

clean_data = {}
for row in score_data:
	row_id = row['business_id']
	if row['inspection_score'] != '':
		if row_id not in clean_data:
			clean_data[row_id] = row
		elif comparedate(row['inspection_date'], clean_data[row_id]['inspection_date']):
			clean_data[row_id] = row


# Get and cache data for each restaurant from Yelp API
# To avoid unexpected overwite, the cached file has been renamed as "yelp_cache_clean.txt" and "business_info_cache_clean.txt"

consumer_key = # your consumer key
consumer_secret = # your consumer_secret
token = # your token
token_secret = # your token_secret

business_info = {}
params = {}
params['location'] = 'San Francisco'
params['limit'] = 1
f1 = open('yelp_cache.txt','w')
f2 = open('business_info_cache.txt','w')
for el in clean_data.values():
	row_id = el['business_id']
	params['term'] = el['business_name']
	latitude = el['business_latitude']
	longitude = el['business_longitude']
	if latitude != '' and longitude != '':
		params['latitude'] = latitude
		params['longitude'] = longitude
	o = requests_oauthlib.OAuth1Session(consumer_key, consumer_secret, token, token_secret)
	res = o.get("http://api.yelp.com/v2/search", params = params)
	f1.write(json.dumps(res.json())+'\n')
	business_info[row_id] = res.json()
f2.write(json.dumps(business_info))


# load cache data 
f3 = open('business_info_cache_clean.txt','r')
business_info = json.loads(f3.read())


# Update rating and category info into clean_data 
for el in clean_data:
	try:
		clean_data[el]['rating'] = business_info[el]['businesses'][0]['rating']
	except:
		clean_data[el]['rating'] = 'Unknown'
	try:
		res_cat = [c[0] for c in business_info[el]['businesses'][0]['categories']]
		if 'Coffee & Tea' in res_cat:
			clean_data[el]['Coffee&Tea'] = 1
		else:
			clean_data[el]['Coffee&Tea'] = 0
		if 'Sandwiches' in res_cat:
			clean_data[el]['Sandwiches'] = 1
		else:
			clean_data[el]['Sandwiches'] =0
		if 'American (New)' in res_cat:
			clean_data[el]['American'] = 1
		else:
			clean_data[el]['American'] = 0
		if 'Mexican' in res_cat:
			clean_data[el]['Mexican'] = 1
		else:
			clean_data[el]['Mexican'] = 0
		if 'Chinese' in res_cat:
			clean_data[el]['Chinese'] = 1
		else:
			clean_data[el]['Chinese'] = 0
		if 'Pizza' in res_cat:
			clean_data[el]['Pizza'] = 1
		else:
			clean_data[el]['Pizza'] = 0
		if 'Italian' in res_cat:
			clean_data[el]['Italian'] = 1
		else:
			clean_data[el]['Italian'] = 0
	except:
		continue
# Save clean data into a csv file
# To avoid unexpected overwite, the csv file generated by this code previouly has been renamed as "clean_data_v2.csv"


with open('clean_data.csv', 'w') as csvfile:
	fieldnames = 'business_id,business_name,business_address,business_city,business_state,business_postal_code,business_latitude,business_longitude,business_location,business_phone_number,inspection_id,inspection_date,inspection_score,inspection_type,violation_id,violation_description,risk_category,rating,American,Mexican,Chinese,Italian,Coffee&Tea,Sandwiches,Pizza'.split(',')
	writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
	writer.writeheader()
	for el in clean_data:
		writer.writerow(clean_data[el])


# Data prepared for visualization
x = [1,1.5,2,2.5,3,3.5,4,4.5,5]
y1 = [mean([int(el['inspection_score']) for el in clean_data.values() if el['rating'] == i ]) for i in x]
y2 = [len([el['rating'] for el in clean_data.values() if el['rating'] == i ]) for i in x]

print zip(x,y1)
print zip(x,y2)






	






























